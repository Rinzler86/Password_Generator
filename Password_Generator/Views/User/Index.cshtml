@model Password_Generator.Models.UserDashboardViewModel
@using Password_Generator.Helpers

@{
    ViewData["Title"] = "User Dashboard";
}

<!-- Bootstrap CSS -->
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" />

<!-- Add FontAwesome for icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">

<div class="container mt-4">
    <h2 class="mb-4">Welcome, @CapitalizeWords(Model.User?.FirstName ?? "User") @CapitalizeWords(Model.User?.LastName ?? "")!</h2>

    @functions {
        private string CapitalizeWords(string input)
        {
            if (string.IsNullOrEmpty(input))
                return input;

            return System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(input.ToLower());
        }
    }
    
    <!-- Bootstrap Tabs -->
    <ul class="nav nav-tabs" id="dashboardTabs" role="tablist">
      <li class="nav-item">
        <a class="nav-link active" id="new-tab" data-toggle="tab" href="#new" role="tab" aria-controls="new" aria-selected="true">New</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" id="passwords-tab" data-toggle="tab" href="#passwords" role="tab" aria-controls="passwords" aria-selected="false">Passwords</a>
      </li>
    </ul>
    <div class="tab-content" id="dashboardTabsContent">
      <!-- New Password Entry Tab -->
      <div class="tab-pane fade show active" id="new" role="tabpanel" aria-labelledby="new-tab">
          <div class="card mt-3">
              <div class="card-header">Add New Password Entry</div>
              <div class="card-body">
                <form id="addPasswordForm" method="post">
                  <div id="flashMessageContainer"></div>
                  <div class="form-group">
                      <label for="vendorName">Vendor Name</label>
                      <input type="text" class="form-control" id="vendorName" name="VendorName" required />
                  </div>
                  <div class="form-group">
                      <label for="url">URL</label>
                      <input type="url" class="form-control" id="url" name="Url" required />
                  </div>
                  
                  <div id="passwordGeneratorOptions" class="mb-3">
                      <div class="form-row">
                          <div class="col">
                              <label for="length">Length</label>
                              <input type="number" class="form-control" id="length" name="length" value="12" />
                          </div>
                          <div class="col">
                              <label for="numUpper">Upper Case</label>
                              <input type="number" class="form-control" id="numUpper" name="numUpper" value="2" />
                          </div>
                          <div class="col">
                              <label for="numLower">Lower Case</label>
                              <input type="number" class="form-control" id="numLower" name="numLower" value="4" />
                          </div>
                          <div class="col">
                              <label for="numDigits">Digits</label>
                              <input type="number" class="form-control" id="numDigits" name="numDigits" value="2" />
                          </div>
                          <div class="col">
                              <label for="numSpecial">Special Characters</label>
                              <input type="number" class="form-control" id="numSpecial" name="numSpecial" value="2" />
                          </div>
                      </div>
                      <button style="margin-top: 20px;" type="button" id="generatePasswordButton" class="btn btn-secondary mb-2">Generate Password</button>
                      <div class="form-group">
                      <label for="password">Password</label>
                          <input type="text" class="form-control" id="password" name="CurrentPassword" required />
                      </div>
                  </div>
                  <button type="submit" class="btn btn-primary">Save Password</button>
                </form>

              </div>
          </div>
      </div>
      
      <!-- Passwords Tab -->
    <div class="tab-pane fade" id="passwords" role="tabpanel" aria-labelledby="passwords-tab">
        <div class="card mt-3">
            <div class="card-header">Your Passwords</div>
            <div class="card-body">
                @if(Model.VendorPasswords != null && Model.VendorPasswords.Any())
                {
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Vendor Name</th>
                                <th>Password</th>
                                <th>Date Created</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach(var vp in Model.VendorPasswords)
                            {
                                <tr>
                                    <td>@vp.VendorName</td>
                                    <td>
                                        <input type="password" class="form-control d-inline-block" value="@vp.CurrentPassword" readonly style="width: auto;" />
                                        <i class="fa fa-eye ml-2" style="cursor: pointer;" onclick="togglePasswordVisibility(this)"></i>
                                        <i class="fa fa-copy ml-2" style="cursor: pointer;" onclick="copyToClipboard('@vp.CurrentPassword')"></i>
                                    </td>
                                    <td>@vp.DateCreated.ToString("g")</td>
                                    <td>
                                        <!-- History button: calls AJAX to get full history -->
                                        <button class="btn btn-info btn-sm" onclick="openModal('@vp.VendorName')">History</button>
                                        <!-- Delete button: calls AJAX to delete the password entry -->
                                        <button class="btn btn-danger btn-sm" onclick="confirmDelete(@vp.Id)">Delete</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <p>No passwords found.</p>
                }
            </div>
        </div>
    </div>
    </div>
</div>

<!-- Bootstrap Modal for password history -->
<div class="modal fade" id="passwordHistoryModal" tabindex="-1" role="dialog" aria-labelledby="passwordHistoryModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="passwordHistoryModalLabel">Password History</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick="closeModal()">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <table class="table table-striped">
          <thead>
            <tr>
              <th>Old Password</th>
              <th>Date Created</th>
            </tr>
          </thead>
          <tbody id="passwordHistoryTableBody">
          </tbody>
        </table>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="closeModal()">Close</button>
      </div>
    </div>
  </div>
</div>

<!-- Confirmation Modal for Deleting Password -->
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" role="dialog" aria-labelledby="deleteConfirmationModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="deleteConfirmationModalLabel">Confirm Delete</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        Are you sure you want to delete this password entry?
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-danger" id="confirmDeleteButton">Delete</button>
      </div>
    </div>
  </div>
</div>


<!-- Bootstrap and jQuery scripts (remove if already included in your layout) -->
<script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>

<script>
    document.getElementById('generatePasswordButton').addEventListener('click', function () {
        const length = parseInt(document.getElementById('length').value);
        const numUpper = parseInt(document.getElementById('numUpper').value);
        const numLower = parseInt(document.getElementById('numLower').value);
        const numDigits = parseInt(document.getElementById('numDigits').value);
        const numSpecial = parseInt(document.getElementById('numSpecial').value);

        fetch('/Password/GenerateAdvancedPassword', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ Length: length, NumUpper: numUpper, NumLower: numLower, NumDigits: numDigits, NumSpecial: numSpecial })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                document.getElementById('password').value = data.password;
            } else {
                alert(data.message || 'Password generation failed.');
            }
        })
        .catch(error => {
            console.error('Error generating password:', error);
            alert('An error occurred while generating the password.');
        });
    });

    function openModal(vendorName) {
        fetch('/Password/GetPasswordHistory/' + encodeURIComponent(vendorName))
            .then(response => response.json())
            .then(data => {
                if(data.success) {
                    const history = data.history;
                    document.getElementById('passwordHistoryModalLabel').textContent = 'Password History for ' + vendorName;
                    const tableBody = document.getElementById('passwordHistoryTableBody');
                    tableBody.innerHTML = '';
                    history.forEach(entry => {
                        const row = document.createElement('tr');
                        const oldPasswordCell = document.createElement('td');
                        const dateCreatedCell = document.createElement('td');
                        oldPasswordCell.textContent = entry.oldPassword;
                        dateCreatedCell.textContent = new Date(entry.createdAt).toLocaleString();
                        row.appendChild(oldPasswordCell);
                        row.appendChild(dateCreatedCell);
                        tableBody.appendChild(row);
                    });
                    $('#passwordHistoryModal').modal('show');
                } else {
                    alert(data.message || 'No history found.');
                }
            })
            .catch(error => {
                console.error('Error fetching history:', error);
                alert('Error fetching history.');
            });
    }

    function closeModal() {
        $('#passwordHistoryModal').modal('hide');
    }

    // Handle form submission with fetch to prevent page refresh
    document.getElementById('addPasswordForm').addEventListener('submit', function (event) {
        event.preventDefault();
        // Build JSON from form fields
        const formData = new FormData(event.target);
        const jsonData = {};
        formData.forEach((value, key) => {
            jsonData[key] = value;
        });
        console.log(JSON.stringify(jsonData));
    
        fetch('/Password/AddPassword', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(jsonData)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showFlashMessage("Password added successfully!", "success");
                event.target.reset();
                // Optionally, update the password tab (via fetch or reload part of the page)
            } else {
                showFlashMessage("Error: " + data.message, "danger");
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showFlashMessage("An error occurred while adding the password.", "danger");
        });
    });

    // Function to show flash message using a Bootstrap alert style
    function showFlashMessage(message, type) {
        // Create alert div
        const alertDiv = document.createElement("div");
        alertDiv.className = "alert alert-" + type;
        alertDiv.textContent = message;
        // Optionally, style it to be fixed in the top-right corner
        alertDiv.style.position = "fixed";
        alertDiv.style.top = "20px";
        alertDiv.style.right = "20px";
        alertDiv.style.zIndex = "1000";
        document.body.appendChild(alertDiv);
        // Remove alert after 3 seconds
        setTimeout(() => {
            alertDiv.remove();
        }, 3000);
    }

</script>

<script>
    let passwordIdToDelete = null;

    function confirmDelete(id) {
        passwordIdToDelete = id;
        $('#deleteConfirmationModal').modal('show');
    }

    document.getElementById('confirmDeleteButton').addEventListener('click', function () {
        if (passwordIdToDelete !== null) {
            fetch('/Password/DeletePassword', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(passwordIdToDelete)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload(); // Reload the page to reflect the changes
                } else {
                    alert(data.message || 'Failed to delete the password entry.');
                }
            })
            .catch(error => {
                console.error('Error deleting password:', error);
                alert('An error occurred while deleting the password.');
            })
            .finally(() => {
                $('#deleteConfirmationModal').modal('hide');
                passwordIdToDelete = null;
            });
        }
    });
</script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const urlInput = document.getElementById('url');
        const defaultUrl = 'https://';

        // Set the default value to 'https://'
        urlInput.value = defaultUrl;

        // Place the cursor after 'https://'
        urlInput.setSelectionRange(defaultUrl.length, defaultUrl.length);

        // Optional: Add an event listener to prevent users from removing 'https://'
        urlInput.addEventListener('input', function () {
            if (!urlInput.value.startsWith(defaultUrl)) {
                urlInput.value = defaultUrl;
                urlInput.setSelectionRange(defaultUrl.length, defaultUrl.length);
            }
        });
    });
</script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const urlInput = document.getElementById('url');
        const defaultUrl = 'https://';

        // Set the default value to 'https://'
        urlInput.value = defaultUrl;

        // Place the cursor after 'https://'
        urlInput.setSelectionRange(defaultUrl.length, defaultUrl.length);

        // Optional: Add an event listener to prevent users from removing 'https://'
        urlInput.addEventListener('input', function () {
            if (!urlInput.value.startsWith(defaultUrl)) {
                urlInput.value = defaultUrl;
                urlInput.setSelectionRange(defaultUrl.length, defaultUrl.length);
            }
        });

        // Auto-update length based on other inputs
        const lengthInput = document.getElementById('length');
        const numUpperInput = document.getElementById('numUpper');
        const numLowerInput = document.getElementById('numLower');
        const numDigitsInput = document.getElementById('numDigits');
        const numSpecialInput = document.getElementById('numSpecial');

        function updateLength() {
            const totalLength = parseInt(numUpperInput.value) + parseInt(numLowerInput.value) + parseInt(numDigitsInput.value) + parseInt(numSpecialInput.value);
            lengthInput.value = totalLength;
        }

        // Add event listeners to update length when any of the other inputs change
        numUpperInput.addEventListener('input', updateLength);
        numLowerInput.addEventListener('input', updateLength);
        numDigitsInput.addEventListener('input', updateLength);
        numSpecialInput.addEventListener('input', updateLength);

        // Initial update of length
        updateLength();
    });
</script>


<script>
    function togglePasswordVisibility(icon) {
        const passwordInput = icon.previousElementSibling;
        if (passwordInput.type === 'password') {
            passwordInput.type = 'text';
            icon.className = 'fa fa-eye-slash ml-2';
        } else {
            passwordInput.type = 'password';
            icon.className = 'fa fa-eye ml-2';
        }
    }

    function copyToClipboard(password) {
        navigator.clipboard.writeText(password).then(function() {
            alert('Password copied to clipboard');
        }, function(err) {
            console.error('Could not copy text: ', err);
        });
    }
</script>